name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      migration_path:
        description: 'Migration file path (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (preview changes only)'
        required: false
        default: true
        type: boolean

jobs:
  migrate:
    name: Run Database Migration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "PROJECT_REF=${{ secrets.PROD_PROJECT_REF }}" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.PROD_DB_URL }}" >> $GITHUB_ENV
          else
            echo "PROJECT_REF=${{ secrets.STAGING_PROJECT_REF }}" >> $GITHUB_ENV
            echo "DB_URL=${{ secrets.STAGING_DB_URL }}" >> $GITHUB_ENV
          fi

      - name: Verify database connection
        run: |
          psql "$DB_URL" -c "SELECT version();"

      - name: Create database backup
        run: |
          BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
          pg_dump "$DB_URL" > "$BACKUP_FILE"
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Upload backup to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: ${{ env.BACKUP_FILE }}
          retention-days: 30

      - name: Preview migration changes (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 Previewing migration changes..."
          supabase db diff --schema public

      - name: Run specific migration
        if: github.event.inputs.migration_path != '' && github.event.inputs.dry_run == 'false'
        run: |
          echo "🚀 Running specific migration: ${{ github.event.inputs.migration_path }}"
          psql "$DB_URL" -f "${{ github.event.inputs.migration_path }}"

      - name: Run all pending migrations
        if: github.event.inputs.migration_path == '' && github.event.inputs.dry_run == 'false'
        run: |
          echo "🚀 Running all pending migrations..."
          supabase db push --project-ref "$PROJECT_REF"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify migration success
        if: github.event.inputs.dry_run == 'false'
        run: |
          echo "✅ Verifying migration success..."
          psql "$DB_URL" -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;"

      - name: Run post-migration tests
        if: github.event.inputs.dry_run == 'false'
        run: |
          echo "🧪 Running post-migration tests..."
          # Add your post-migration test commands here
          # For example: npm run test:db

      - name: Notify migration completion
        if: github.event.inputs.dry_run == 'false'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#database'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                title: '🗄️ Database Migration',
                text: `Database migration ${{ job.status }} on ${{ github.event.inputs.environment }}`,
                fields: [{
                  title: 'Environment',
                  value: '${{ github.event.inputs.environment }}',
                  short: true
                }, {
                  title: 'Migration',
                  value: '${{ github.event.inputs.migration_path || "All pending" }}',
                  short: true
                }, {
                  title: 'Backup',
                  value: 'Created: ${{ env.BACKUP_FILE }}',
                  short: false
                }]
              }]
            }

  rollback:
    name: Rollback Migration
    runs-on: ubuntu-latest
    if: failure()
    needs: [migrate]
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Download backup
        uses: actions/download-artifact@v4
        with:
          name: db-backup-${{ github.event.inputs.environment }}-${{ github.run_number }}

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "DB_URL=${{ secrets.PROD_DB_URL }}" >> $GITHUB_ENV
          else
            echo "DB_URL=${{ secrets.STAGING_DB_URL }}" >> $GITHUB_ENV
          fi

      - name: Restore database from backup
        run: |
          echo "🔄 Restoring database from backup..."
          BACKUP_FILE=$(ls backup_*.sql | head -1)
          psql "$DB_URL" < "$BACKUP_FILE"

      - name: Verify rollback
        run: |
          echo "✅ Verifying rollback success..."
          psql "$DB_URL" -c "SELECT version();"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#database'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              attachments: [{
                color: 'warning',
                title: '⚠️ Database Rollback',
                text: 'Database migration failed and has been rolled back',
                fields: [{
                  title: 'Environment',
                  value: '${{ github.event.inputs.environment }}',
                  short: true
                }, {
                  title: 'Action',
                  value: 'Automatic Rollback',
                  short: true
                }]
              }]
            }